for (i in 1:n.sims){
data3list[[i]] = b3[i] %>%
map_df(as_tibble)
}
fit_data3 = do.call(cbind, data3list)
for (i in 1:n.sims){
data4list[[i]]  = b4[i] %>%
map_df(as_tibble)
}
fit_data4 = do.call(cbind, data4list)
for (i in 1:n.sims){
data5list[[i]] = b5[i] %>%
map_df(as_tibble)
}
fit_data5 = do.call(cbind, data5list)
# Chunk 11
### Rename variable as Set and obs.
names(fit_data1) <- paste0("set",".", 1:100)
names(fit_data2) <- paste0("set",".", 1:100)
names(fit_data3) <- paste0("set",".", 1:100)
names(fit_data4) <- paste0("set",".", 1:100)
names(fit_data5) <- paste0("set",".", 1:100)
head(fit_data5)
# Chunk 12
## Pointwise variance across 100 datasets
pv1 = apply(fit_data1,1,var)
pv2 = apply(fit_data2,1,var)
pv3 = apply(fit_data3,1,var)
pv4 = apply(fit_data4,1,var)
pv5 = apply(fit_data5,1,var)
plotdf = as.data.frame(cbind(xdf, pv1, pv2, pv3, pv4, pv5))
qplot(plotdf$x.init, plotdf$pv1, geom='smooth', span =0.1)
qplot(plotdf$x.init, plotdf$pv2, geom='smooth', span =0.1)
# Chunk 13
colnames(plotdf) <- c("x", paste0("pv",".", 1:5))
plotdf = as.data.frame(plotdf)
head(plotdf)
class(plotdf)
plotdf = plotdf %>%
gather("model", "point.variance", pv.1:pv.5)
ggplot(plotdf, aes(x = x, y = point.variance, col = model)) +
geom_smooth(se=FALSE, method="loess", span=0.2, size=0.44) +
geom_point(size = 0.33, alpha = 0.6) +
ggtitle("pointwise variance") +
theme(axis.text.y = element_text(colour = 'black', size = 10),
axis.title.y = element_text(size = 12,
hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 10, hjust = 0.5,
vjust = 0.5, face = 'bold')) +
labs(caption = "Pointwise variance curves for four different models, with X con- sisting of 50 points drawn at random from U[0,1]") +
scale_color_manual(labels = c("OLS model",
"OLS with cubic polynomial model",
"Cubic spline (or B-spline) with 2 knots",
"Natural Cubic Spline-5 knots",
"Smoothing spline"),
values = c("red",
"green", "Yellow", "orange","navy"))
# Chunk 14
df <- read.delim("./SAheart.data", sep = ",")
df =  df %>%
dplyr::select(-row.names) %>%
mutate(famhist = ifelse(famhist == "Present", 1, 0))
## Convert the factor variable as binary 0-1 variable, 0 indicates absence
str(df)
## Overview of the data covariates in model
p = dim(df)
# the last column is response
p
# Chunk 15
## sampling segments
## Set up the train and test data
traindata = df[1:300,]
testdata = df[301:462,]
# standardization of predictors
trainst <- traindata
testst <- testdata
for(i in 1:9) {
trainst[,i] <- trainst[,i] - mean(df[,i]);
trainst[,i] <- trainst[,i]/sd(df[,i]);
}
for(i in 1:9) {
testst[,i] <- testst[,i] - mean(df[,i]);
testst[,i] <- testst[,i]/sd(df[,i]);
}
# Chunk 16
model1 <- glm(chd ~ .,
family = "binomial",
data = trainst)
tidy(model1)
require(knitr)
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", logit.error, logit.se,
"LDA",    lda.error  ,    lda.se,
"QDA",   qda.error  ,   qda.se,
)
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
# Chunk 1
library(tidyverse)
library(broom)
library(lattice)
library(caret)
library(glmnet)
library(MASS)
library(pls)
library(STAT)
library(splines)
require(ggplot2)
# Chunk 2
## Basic prep
set.seed(1018)
a = as.vector(runif(50, 0,1))
hist(a,probability=TRUE,col=gray(.9),main="uniform on [0,1]")
## For each dataset X is identical
x.init = a
# Chunk 3
n.sims <- 100
n.obs <- 50
# Make an empty list to save output in
xl = list()
el = list()
yl = list()
df = list()
## use for loop to iterate: 100 datasets
for (i in 1:n.sims){
xl[[i]] = x.init
el[[i]] = as.vector(rnorm(50, mean = 0, sd = 1)) ## std.normal
yl[[i]] = (sin(2 * pi * (xl[[i]])^3 ))^3 + el[[i]]
df[[i]] = data.frame(x = xl[[i]], y = yl[[i]])
}
## look at the data
head(df[[100]])
head(df[[50]])
# Chunk 4
set.seed(10008)
a1 = list()
b1 = list()
for (i in 1:n.sims){
a1[[i]] = lm(y ~ x, df[[i]]) ## construct the model
b1[[i]] = as.matrix(a1[[i]]$fitted.values) ## Fitted value list
}
## validation
fittest1 = lm(y~x,
data = df[[100]])
tail(fittest1$fitted.values)
tail(b1[[100]])
# Chunk 5
a2 = list()
b2 = list()
for (i in 1:n.sims){
a2[[i]] = lm(y ~ poly(x, 3), df[[i]]) ## construct the model:cubic
b2[[i]] = as.matrix(a2[[i]]$fitted.values) ## Fitted value list
}
## validation
fittest2 = lm(y~poly(x, 3),
data = df[[100]])
tail(fittest2$fitted.values)
tail(b2[[100]])
# Chunk 6
require(splines)
a3 = list()
b3 = list()
for (i in 1:n.sims){
a3[[i]] = lm(y ~ bs(x,
knots = c(0.33,0.66)), df[[i]]) ## construct the model:cubic spline
b3[[i]] = as.matrix(a3[[i]]$fitted.values) ## Fitted value list
}
### Validate Model Coefficients
fittest3 <-lm(y ~ bs(x,
knots = c(0.33,0.66)),df[[100]])
tail(fittest3$fitted.values)
tail(b3[[100]])
# Chunk 7
set.seed(10008)
a4 = list()
b4 = list()
for (i in 1:n.sims){
a4[[i]] = lm(y ~ ns(x,
knots = c(0.1, .3, .5, .7, .9)), df[[i]])
b4[[i]] = as.matrix(a4[[i]]$fitted.values) ## Fitted value list
}
### Validate Model Coefficients
fittest4 <- lm(y ~ ns(x,
knots = c(0.1, .3, .5, .7, .9)),df[[100]])
tail(fittest4$fitted.values)
tail(b4[[100]])
# Plotting the data, the fit, and the 95% CI:
#plot(x, y, ylim = c(-1, +1))
#lines(df[[1]], b4[[1]], col = "darkred", lty = 2)
# Chunk 8
a5 = list()
b5 = list()
for (i in 1:n.sims){
## GCV choose tuning parameter
a5[[i]] = smooth.spline(xl[[i]], yl[[i]],
cv = FALSE) ## Indicating GCV method
## Fitted value list
b5[[i]] = as.matrix(a5[[i]]$y)
}
### Validate Model Coefficients
fittest5 <- smooth.spline(xl[[1]], yl[[1]],
cv = FALSE)
tail(fittest5$y)
tail(b5[[1]])
### Plotting comparison
plot(xl[[1]], yl[[1]],  col="grey",xlab="Xdf1",ylab="Ydf1")
abline(v=c(0.1, .3, .5, .7, .9),lty= 2,col="darkgreen")
lines(fittest5, col="red",lwd=2)
# Chunk 9
## Xij ith-variable, jth training set
xdf = as.data.frame(x.init)
# Chunk 10
### Extract fitted value and combine
data1list = list()
data2list = list()
data3list = list()
data4list = list()
data5list = list()
for (i in 1:n.sims){
data1list[[i]] = b1[i] %>%
map_df(as_tibble)
}
fit_data1 = do.call(cbind, data1list)
for (i in 1:n.sims){
data2list[[i]] = b2[i] %>%
map_df(as_tibble)
}
fit_data2 = do.call(cbind, data2list)
for (i in 1:n.sims){
data3list[[i]] = b3[i] %>%
map_df(as_tibble)
}
fit_data3 = do.call(cbind, data3list)
for (i in 1:n.sims){
data4list[[i]]  = b4[i] %>%
map_df(as_tibble)
}
fit_data4 = do.call(cbind, data4list)
for (i in 1:n.sims){
data5list[[i]] = b5[i] %>%
map_df(as_tibble)
}
fit_data5 = do.call(cbind, data5list)
# Chunk 11
### Rename variable as Set and obs.
names(fit_data1) <- paste0("set",".", 1:100)
names(fit_data2) <- paste0("set",".", 1:100)
names(fit_data3) <- paste0("set",".", 1:100)
names(fit_data4) <- paste0("set",".", 1:100)
names(fit_data5) <- paste0("set",".", 1:100)
head(fit_data5)
# Chunk 12
## Pointwise variance across 100 datasets
pv1 = apply(fit_data1,1,var)
pv2 = apply(fit_data2,1,var)
pv3 = apply(fit_data3,1,var)
pv4 = apply(fit_data4,1,var)
pv5 = apply(fit_data5,1,var)
plotdf = as.data.frame(cbind(xdf, pv1, pv2, pv3, pv4, pv5))
qplot(plotdf$x.init, plotdf$pv1, geom='smooth', span =0.1)
qplot(plotdf$x.init, plotdf$pv2, geom='smooth', span =0.1)
# Chunk 13
colnames(plotdf) <- c("x", paste0("pv",".", 1:5))
plotdf = as.data.frame(plotdf)
head(plotdf)
class(plotdf)
plotdf = plotdf %>%
gather("model", "point.variance", pv.1:pv.5)
ggplot(plotdf, aes(x = x, y = point.variance, col = model)) +
geom_smooth(se=FALSE, method="loess", span=0.2, size=0.44) +
geom_point(size = 0.33, alpha = 0.6) +
ggtitle("pointwise variance") +
theme(axis.text.y = element_text(colour = 'black', size = 10),
axis.title.y = element_text(size = 12,
hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 10, hjust = 0.5,
vjust = 0.5, face = 'bold')) +
labs(caption = "Pointwise variance curves for four different models, with X con- sisting of 50 points drawn at random from U[0,1]") +
scale_color_manual(labels = c("OLS model",
"OLS with cubic polynomial model",
"Cubic spline (or B-spline) with 2 knots",
"Natural Cubic Spline-5 knots",
"Smoothing spline"),
values = c("red",
"green", "Yellow", "orange","navy"))
# Chunk 14
df <- read.delim("./SAheart.data", sep = ",")
df =  df %>%
dplyr::select(-row.names) %>%
mutate(famhist = ifelse(famhist == "Present", 1, 0))
## Convert the factor variable as binary 0-1 variable, 0 indicates absence
str(df)
## Overview of the data covariates in model
p = dim(df)
# the last column is response
p
# Chunk 15
## sampling segments
## Set up the train and test data
traindata = df[1:300,]
testdata = df[301:462,]
# standardization of predictors
trainst <- traindata
testst <- testdata
for(i in 1:9) {
trainst[,i] <- trainst[,i] - mean(df[,i]);
trainst[,i] <- trainst[,i]/sd(df[,i]);
}
for(i in 1:9) {
testst[,i] <- testst[,i] - mean(df[,i]);
testst[,i] <- testst[,i]/sd(df[,i]);
}
# Chunk 16
model1 <- glm(chd ~ .,
family = "binomial",
data = trainst)
tidy(model1)
# Chunk 17
# predictions
glm.probs <- round(predict(model1, testst,
type="response"))
# confusion matrix
confusion(tifelse(glm.probs > 0.5, 1, 0), testst$chd)
table(testst$chd, ifelse(glm.probs > 0.5, 1, 0))
# Chunk 18
# error rate ## 0.28
testst %>%
summarise(logit.error = mean(ifelse(glm.probs > 0.5, 1, 0) != chd),
logit.sd = sd(ifelse(glm.probs > 0.5, 1, 0) != chd))
# Chunk 19
lda.m1 <- lda(chd ~ .,
data = trainst)
plot(lda.m1)
# Chunk 20
## Fit on testst
test.predicted.lda <- predict(lda.m1, testst,
type = "response")
# number of high-risk patients with 50% probability of being diseased
sum(test.predicted.lda$posterior[, 2] > .5)
## 2-2 Table classification: matrix
lda.cm <- table(testst$chd, test.predicted.lda$class)
list(LDA_model = lda.cm %>%
prop.table() %>%
round(3))
# Chunk 21
testst %>%
mutate(lda.pred = test.predicted.lda$class) %>%
summarise(lda.error = mean(chd != lda.pred),
lda.se = sd(testst$chd != lda.pred))
# Chunk 22
qda.m1 <- qda(chd ~ ., data = trainst)
# Chunk 23
test.predicted.qda <- predict(qda.m1, newdata = testst)
## 2-2 Table classification
qda.cm <- table(testst$chd, test.predicted.qda$class)
list(QDA_model = qda.cm %>% prop.table() %>% round(3))
# Chunk 24
testst %>%
mutate(qda.pred = test.predicted.qda$class) %>%
summarise(qda.error = mean(chd != qda.pred),
qda.se = sd(testst$chd != qda.pred))
require(knitr)
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", 0.2530864,  0.4361282,
"LDA",    0.2530864,  0.4361282,
"QDA",   0.2592593  ,   0.439587,
)
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
inserttable:::insert_table()
require(knitr)
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", 0.2530864,  0.4361282,
"LDA",    0.2530864,  0.4361282,
"QDA",   0.2592593  ,   0.439587,
)
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
inserttable:::insert_table()
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", 0.2530864,  0.4361282,
"LDA",    0.2530864,  0.4361282,
"QDA",   0.2592593  ,   0.439587,
)
require(knitr)
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", 0.2530864,  0.4361282,
"LDA",    0.2530864,  0.4361282,
"QDA",   0.2592593  ,   0.439587
)
require(knitr)
kable(my_tbl11, digits = 3, row.names = FALSE, align = "c",
caption = NULL)
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", 0.2530864,  0.4361282,
"LDA",    0.2530864,  0.4361282,
"QDA",   0.2592593  ,   0.439587
)
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
inserttable:::insert_table()
1my_tbl <- tibble::tribble(
~Col_1, ~Col_2, ~Col_3,
NA,     NA,     NA,
NA,     NA,     NA,
NA,     NA,     NA,
NA,     NA,     NA
)
require(knitr)
kable(1my_tbl, digits = 3, row.names = FALSE, align = "c",
caption = NULL)
inserttable:::insert_table()
inserttable:::insert_table()
require(knitr)
m <- tibble::tribble(
~Model, ~Test Error, ~SD,
"Logistic", 0.2530864,  0.4361282,
"LDA",    0.2530864,  0.4361282,
"QDA",   0.2592593  ,   0.439587
)
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
inserttable:::insert_table()
inserttable:::insert_table()
require(knitr)
m <- tibble(rowname = c("Model", "Test Error", "SD"),
r1 =      c("Logistic", 0.2530864,  0.4361282),
r2 =      c("LDA",    0.2530864,  0.4361282),
r3 =     c("QDA",   0.2592593  ,   0.439587)  )
kable(m, digits = 3, row.names = FALSE, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble(
r1 =      c("Logistic", 0.2530864,  0.4361282),
r2 =      c("LDA",    0.2530864,  0.4361282),
r3 =     c("QDA",   0.2592593  ,   0.439587)  )
kable(m, digits = 3, row.names = c("Model", "Test Error", "SD"), align = "c",
caption = "Summary test error and sd")
colnames(m)
require(knitr)
m <- tibble(
r1 =      c("Logistic", 0.2530864,  0.4361282),
r2 =      c("LDA",    0.2530864,  0.4361282),
r3 =     c("QDA",   0.2592593  ,   0.439587)  )
colnames(m) = c("Model", "Test Error", "SD")
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble(
r1 =      c( "Model", 0.2530864,  0.4361282),
r2 =      c( "Test Error",  0.2530864,  0.4361282),
r3 =     c( "SD",  0.2592593  ,   0.439587)  )
colnames(m) = c("Logistic","LDA",  "QDA", )
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble(
r1 =      c( "Model", 0.2530864,  0.4361282),
r2 =      c( "Test Error",  0.2530864,  0.4361282),
r3 =     c( "SD",  0.2592593  ,   0.439587)
colnames(m) = c("Logistic","LDA",  "QDA", )
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble(
r1 =      c( "Model", 0.2530864,  0.4361282),
r2 =      c( "Test Error",  0.2530864,  0.4361282),
r3 =     c( "SD",  0.2592593  ,   0.439587)
colnames(m) = c("Logistic","LDA",  "QDA" )
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble(
r1 =      c( "Model", 0.2530864,  0.4361282),
r2 =      c( "Test Error",  0.2530864,  0.4361282),
r3 =     c( "SD",  0.2592593  ,   0.439587)  )
colnames(m) = c("Logistic","LDA",  "QDA" )
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble( r0 = c("Model", "Test Error", "SD")
r1 =      c(  0.2530864,  0.4361282),
r2 =      c(  0.2530864,  0.4361282),
r3 =     c(  0.2592593  ,   0.439587)  )
colnames(m) = c("Logistic","LDA",  "QDA" )
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble( r0 = c("Model", "Test Error", "SD"),
r1 =      c(  0.2530864,  0.4361282),
r2 =      c(  0.2530864,  0.4361282),
r3 =     c(  0.2592593  ,   0.439587)  )
colnames(m) = c("Logistic", "LDA",  "QDA","NA" )
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
require(knitr)
m <- tibble( r0 = c( "Test Error", "SD"),
r1 =      c(  0.2530864,  0.4361282),
r2 =      c(  0.2530864,  0.4361282),
r3 =     c(  0.2592593  ,   0.439587)  )
colnames(m) = c( "Model","Logistic", "LDA",  "QDA")
kable(m, digits = 3, align = "c",
caption = "Summary test error and sd")
